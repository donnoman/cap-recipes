#user  nobody;
worker_processes  1;

# nginx  file limits.
worker_rlimit_nofile 40000;

# ===SYSLOG===
# Sytax: syslog auth|authpriv|cron|daemon|ftp|kern|local0-7|lpr|mail|news|syslog|user|uucp [program_name]
# Default: none
# Context: main
#
# Enable the syslog and set its facility. The default program name is nginx.
#
# ===ERROR_LOG===
# Syntax: error_log [syslog[:emerg|alert|crit|error|warn|notice|info|debug]]['|'file] [ debug | info | notice | warn | error | crit ]
# Default: ${prefix}/logs/error.log
# Context: main, http, server, location
#
# Enable the error_log with the syslog and set its priority. The default priority is error. The error log can be sent to syslog, file or both.
#
# Note: if you set the error_log directive in the main block, the syslog is switched on by default.
#
# ===ACCESS_LOG===
# Syntax: access_log off|[syslog[:emerg|alert|crit|error|warn|notice|info|debug]]['|'path] [format [buffer=size]]]
# Default: access_log logs/access.log combined
# Context: http, server, location
#
# Enable the access_log with the syslog and set its priority. The default priority is notice. The access log can be sent to syslog, file or both.

syslog local6 <%=nginx_passenger_init_d%>;

error_log syslog:info|<%=nginx_passenger_log_dir%>/error.log;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        <%=nginx_passenger_pid%>;


events {
  worker_connections  30000;
  use epoll;
}


http {
    passenger_root <%=capture("#{base_ruby_path}/bin/gem env gemdir").chomp%>/gems/passenger-<%=nginx_passenger_ver%>;
    passenger_ruby <%=base_ruby_path%>/bin/ruby;

    # 5.7.1. passenger_max_pool_size <integer>
    # The maximum number of Ruby on Rails or Rack application instances that may be simultaneously active. A larger number results in higher memory usage, but improved ability to handle concurrent HTTP clients.
    # The optimal value depends on your system’s hardware and the server’s average load. You should experiment with different values. But generally speaking, the value should be at least equal to the number of CPUs (or CPU cores) that you have. If your system has 2 GB of RAM, then we recommend a value of 30. If your system is a Virtual Private Server (VPS) and has about 256 MB RAM, and is also running other services such as MySQL, then we recommend a value of 2.
    # If you find that your server is unable to handle the load on your Rails/Rack websites (i.e. running out of memory) then you should lower this value. (Though if your sites are really that popular, then you should strongly consider upgrading your hardware or getting more servers.)
    # This option may only occur once, in the http configuration bock. The default value is 6.
    passenger_max_pool_size <%=fetch(:nginx_passenger_max_pool_size,"30")%>;

    # 5.7.4. passenger_pool_idle_time <integer>
    # The maximum number of seconds that an application instance may be idle. That is, if an application instance hasn’t received any traffic after the given number of seconds, then it will be shutdown in order to conserve memory.
    # Decreasing this value means that applications will have to be spawned more often. Since spawning is a relatively slow operation, some visitors may notice a small delay when they visit your Rails/Rack website. However, it will also free up resources used by applications more quickly.
    # The optimal value depends on the average time that a visitor spends on a single Rails/Rack web page. We recommend a value of 2 * x, where x is the average number of seconds that a visitor spends on a single Rails/Rack web page. But your mileage may vary.
    # When this value is set to 0, application instances will not be shutdown unless it’s really necessary, i.e. when Phusion Passenger is out of worker processes for a given application and one of the inactive application instances needs to make place for another application instance. Setting the value to 0 is recommended if you’re on a non-shared host that’s only running a few applications, each which must be available at all times.
    # This option may only occur once, in the http configuration block. The default value is 300.
    passenger_pool_idle_time <%=fetch(:nginx_passenger_pool_idle_time,"300")%>;

    # 5.8.1. passenger_log_level <integer>
    # # This option allows one to specify how much information Phusion Passenger should write to the Nginx error log file. A higher log level value means that more information will be logged.
    # Possible values are:
    # 0: Show only errors and warnings.
    # 1: Show the most important debugging information. This might be useful for system administrators who are trying to figure out the cause of a problem.
    # 2: Show more debugging information. This is typically only useful for developers.
    # 3: Show even more debugging information.
    passenger_log_level <%=fetch(:nginx_passenger_log_level,"1")%>;

    # 5.9.2. rails_framework_spawner_idle_time <integer>
    # The FrameworkSpawner server (explained in Spawning methods explained) has an idle timeout, just like the backend processes spawned by Phusion Passenger do. That is, it will automatically shutdown if it hasn’t done anything for a given period.
    # This option allows you to set the FrameworkSpawner server’s idle timeout, in seconds. A value of 0 means that it should never idle timeout.
    # Setting a higher value will mean that the FrameworkSpawner server is kept around longer, which may slightly increase memory usage. But as long as the FrameworkSpawner server is running, the time to spawn a Ruby on Rails backend process only takes about 40% of the time that is normally needed, assuming that you’re using the smart spawning method. So if your system has enough memory, is it recommended that you set this option to a high value or to 0.
    # This option may occur in the following places:
    # In the http configuration block.
    # In a server configuration block.
    # In a location configuration block.
    # In an if configuration scope.
    # In each place, it may be specified at most once. The default value is 1800 (30 minutes).
    rails_framework_spawner_idle_time <%=fetch(:nginx_passenger_rails_framework_spawner_idle_time, "0")%>;

    # 5.9.3. rails_app_spawner_idle_time <integer>
    # The ApplicationSpawner server (explained in Spawning methods explained) has an idle timeout, just like the backend processes spawned by Phusion Passenger do. That is, it will automatically shutdown if it hasn’t done anything for a given period.
    # This option allows you to set the ApplicationSpawner server’s idle timeout, in seconds. A value of 0 means that it should never idle timeout.
    # Setting a higher value will mean that the ApplicationSpawner server is kept around longer, which may slightly increase memory usage. But as long as the ApplicationSpawner server is running, the time to spawn a Ruby on Rails backend process only takes about 10% of the time that is normally needed, assuming that you’re using the smart or smart-lv2 spawning method. So if your system has enough memory, is it recommended that you set this option to a high value or to 0.
    # This option may occur in the following places:
    # In the http configuration block.
    # In a server configuration block.
    # In a location configuration block.
    # In an if configuration scope.
    # In each place, it may be specified at most once. The default value is 600 (10 minutes).
    rails_app_spawner_idle_time <%=fetch(:nginx_passenger_rails_app_spawner_idle_time, "0")%>;

    include       mime.types;
    types {
      audio/x-wav wav;
    }

    default_type  application/octet-stream;

    # ssl_certificate <%=nginx_unicorn_root%>/wildcard.homerun.com.crt;
    # ssl_certificate_key <%=nginx_unicorn_root%>/wildcard.homerun.com.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # don’t use SSLv3 ref: POODLE

    # http://matt.io/technobabble/hivemind_devops_alert:_nginx_does_not_suck_at_ssl/ur
    # http://news.ycombinator.com/item?id=2759596
    # You can force nginx to not enable the expensive cipher by excluding all DHE ciphers.
    # Add "!kEDH" to your cipher list. It disables (the ! disables) any cipher using
    # Ephemeral Diffie-Hellman.
    ssl_ciphers          HIGH:!ADH:!MD5:!kEDH;

    server_names_hash_bucket_size 128;

    log_format timing '$remote_addr - $remote_user [$time_local] $scheme $request $status '
      'upstream_response_time $upstream_response_time '
      'msec $msec request_time $request_time';

    log_format  main  '$remote_addr - $remote_user [$time_local] $request '
        '"$status" $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

    access_log syslog:info main;
    error_log syslog:info;

    client_body_temp_path   '/dev/shm';
    server_name_in_redirect on;
    ignore_invalid_headers  on;

    keepalive_timeout       65;

    #default: keepalive_requests 100
    keepalive_requests      20;
    sendfile                on;
    tcp_nodelay             on;
    tcp_nopush              on;

    gzip  on;
    gzip_http_version 1.0;
    gzip_min_length 0;
    gzip_buffers 16 8k;
    gzip_comp_level 6;
    gzip_static on;
    gzip_proxied any;
    gzip_vary on;
    gzip_types text/plain text/javascript text/css application/x-javascript text/xml;

    ##
    # Optimizations: http://www.typemiss.net/blog/kounoike/20060227-75
    client_header_timeout         10m;
    client_body_timeout           10m;
    send_timeout                  10m;

    connection_pool_size          256;
    client_header_buffer_size     12k;
    large_client_header_buffers   4 8k;
    request_pool_size             4k;

    output_buffers                1 32k;
    postpone_output               1460;

    include <%="#{nginx_passenger_root}"%>/conf/sites-enabled/*;

}
