#user  <%=nginx_user%>;
worker_processes  <%=nginx_worker_processes%>;

# nginx  file limits.
worker_rlimit_nofile 40000;

# worker_connections specifies how many network connections a worker is
# allowed to maintain. worker_rlimit_nofile specifies how many open file
# handles are allowed per worker. Since all tcp connections are file
# handles (descriptors) on *nix systems, worker_rlimit_nofile must be
# greater than worker_connections.


syslog local6 <%=nginx_init_d%>;

error_log syslog:notice|<%=nginx_log_dir%>/error.log;

# pid <%=nginx_pid_file%>;

events {
    worker_connections  30000;
    use epoll;
}

http {
    include       mime.types;
    types {
      audio/x-wav wav;
    }
    default_type  application/octet-stream;

    server_tokens off;

    ssl_protocols        SSLv3 TLSv1;

    # http://matt.io/technobabble/hivemind_devops_alert:_nginx_does_not_suck_at_ssl/ur
    # http://news.ycombinator.com/item?id=2759596
    # You can force nginx to not enable the expensive cipher by excluding all DHE ciphers.
    # Add "!kEDH" to your cipher list. It disables (the ! disables) any cipher using
    # Ephemeral Diffie-Hellman.
    ssl_ciphers          HIGH:!ADH:!MD5:!kEDH;
    ssl_prefer_server_ciphers   on;
    ssl_session_timeout  10m;
    ssl_session_cache    shared:SSL:10m;

    server_names_hash_bucket_size 128;

    log_format timing '$remote_addr - $remote_user [$time_local] "$http_user_agent" $scheme $http_host "$request" $status - request_time $request_time upstream_response_time $upstream_response_time request_id "$request_id"';

    log_format main '$remote_addr - $remote_user [$time_local] $scheme $http_host "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for" - $connection $request_time $upstream_cache_status "$request_id"';

    access_log syslog:info timing;

    client_max_body_size 4M;

    client_body_temp_path   '/dev/shm';
    server_name_in_redirect on;
    ignore_invalid_headers  on;

    #default: keepalive_timeout 75
    keepalive_timeout       75 20;

    #default: keepalive_requests 100
    keepalive_requests      20;
    sendfile                on;
    tcp_nodelay             on;
    tcp_nopush              on;

    gzip  on;
    gzip_http_version 1.0;
    gzip_min_length 0;
    gzip_buffers 16 8k;
    gzip_comp_level 6;
    gzip_static on;
    gzip_proxied any;
    gzip_vary on;
    gzip_types text/plain text/javascript text/css application/x-javascript text/xml;

    ##
    # Optimizations: http://www.typemiss.net/blog/kounoike/20060227-75
    client_header_timeout         10m;
    client_body_timeout           10m;
    send_timeout                  10m;

    connection_pool_size          256;
    client_header_buffer_size     12k;
    large_client_header_buffers   4 8k;
    request_pool_size             4k;

    output_buffers                1 32k;
    postpone_output               1460;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    # On your backend, you can pull the request header x-exampledotcom-rid, and log it or tie it to whatever you may like.
    # This makes it really easy to correlate backend exceptions or instrumentation with frontend http request logs.
    # Goes well with the new Rails 3.2/master support for X-Request-Id.
    proxy_set_header X-Request-Id $request_id;
    proxy_set_header Host $http_host;
    proxy_redirect   off;
    # The proxy_read_timeout directive sets the read timeout for the response of the proxied server,
    # in seconds by default. It determines how long nginx will wait to get the response to a request.
    # The timeout is established not for entire response, but only between two operations of reading.
    proxy_connect_timeout 60;
    proxy_read_timeout 122;
    proxy_next_upstream error timeout http_502;
    proxy_intercept_errors on;
    proxy_buffering on;

    # proxy_buffers
    # syntax: proxy_buffers the_number is_size;
    # default: proxy_buffers 8 4k/8k;
    # context: http, server, location
    # This directive sets the number and the size of buffers, into which will be read the answer, obtained from the proxied server.
    # By default, the size of one buffer is equal to the size of page. Depending on platform this is either 4K or 8K.

    proxy_buffers   16 32k;

    # proxy_buffer_size
    # syntax: proxy_buffer_size the_size;
    # default: proxy_buffer_size 4k/8k;
    # context: http, server, location
    # This directive set the buffer size, into which will be read the first part of the response, obtained from the proxied server.
    # In this part of response the small response-header is located, as a rule.
    # By default, the buffer size is equal to the size of one buffer in directive proxy_buffers; however, it is possible to set it to less.

    # proxy_busy_buffers_size
    # syntax: proxy_busy_buffers_size size;
    # default: proxy_busy_buffers_size proxy_buffer_size * 2;
    # context: http, server, location, if
    # TODO: Description.

    include <%=nginx_root%>/conf/sites-enabled/*;

}
