description "Ruby God Monitor"
author "Donovan Bray donnoman@donovanbray.com"

# When called as an rc.d Kill script use terminate instead of stop to stop all watched children as well.
# USE_TERMINATE_ON_KILL=<%= god_use_terminate_on_kill ? 'yes' : 'no' %> # TODO

# automatically start
start on (hostname and syslog)

stop on runlevel [016]

# Run before process
pre-start script
  <% if god_log_path %>
  mkdir -p `dirname <%=god_log_path%>`
  <% end %>
  mkdir -p `dirname <%=god_pid_path%>`
end script

kill timeout 20
respawn

env PATH=<%=base_ruby_path%>/bin:/usr/sbin:/usr/bin:/sbin:/bin

# command to run
exec <%=god_daemon%> -D -c <%=god_config%> -P <%=god_pid_path%> --log-level <%=god_log_level%> <%= god_log_path ? "--log #{god_log_path}" : '' %>

# Run after process
post-start script
  <% if god_open_socket %>
  /bin/bash -c '
  echo -n "Waiting on the god socket to appear..."
  I=0
  while [ true ]; do
    SOCKET=$(ls /tmp/god.*.sock 2>/dev/null)
    if [ -S "$SOCKET" ]; then
      break
    fi
    I=$(($I+1))
    echo -n "." && sleep 1
    if [ $I -gt 30 ]; then
      echo -n "The god socket never appeared!"
      return "2"
    fi
  done
  echo "done."
  sleep 3 && sh -c "chmod 0777 /tmp/god.*.sock;true"
  '
  <% end %>
end script

